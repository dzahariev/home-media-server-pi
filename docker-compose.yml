services:
  # Main proxy container
  nginx-proxy:
    image: nginxproxy/nginx-proxy:1.6.1-alpine
    container_name: nginx-proxy
    restart: always
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    ports:
      - 80:80
      - 443:443
    volumes:
      - "${DATA_DIR}/nginx/certs:/etc/nginx/certs"
      - "${DATA_DIR}/nginx/vhosts:/etc/nginx/vhost.d"
      - "${DATA_DIR}/nginx/html:/usr/share/nginx/html"
      - "${DATA_DIR}/nginx/htpasswd:/etc/nginx/htpasswd"
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx.conf:/etc/nginx/proxy.conf

  # Letsencrypt companion container
  acme-companion:
    image: nginxproxy/acme-companion:2.4.0
    container_name: acme-companion
    restart: always
    volumes:
      - "${DATA_DIR}/nginx/certs:/etc/nginx/certs"
      - "${DATA_DIR}/nginx/vhosts:/etc/nginx/vhost.d"
      - "${DATA_DIR}/nginx/html:/usr/share/nginx/html"
      - "${DATA_DIR}/nginx/acme:/etc/acme.sh"
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./nginx.conf:/etc/nginx/proxy.conf
    environment: 
      DEFAULT_EMAIL: ${DOMAIN_ADMIN_EMAIL}
    depends_on:
      - nginx-proxy

  # CAdvisor container
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.50.0
    container_name: cadvisor
    restart: unless-stopped
    hostname: 
      cadvisor
    devices:
      - /dev/kmsg
    ipc: shareable
    privileged: true
    command:
      - '-housekeeping_interval=20s'
      - '-docker_only=true'
    security_opt:
      - label=disable
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro

  # Node-Exporter container
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node-exporter
    restart: unless-stopped
    hostname: 
      node-exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave

  # BlackBox exporter container
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.25.0
    container_name: blackbox-exporter
    restart: unless-stopped
    hostname: 
      blackbox-exporter
    command:
      - '--config.file=/config/blackbox.yml'
    volumes:
      - "./blackbox-exporter:/config"

  # Prometheus container
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    restart: unless-stopped
    hostname: 
      prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - "./prometheus:/etc/prometheus"
      - "${MONITORING_DATA_DIR}/prometheus/data:/prometheus"
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    depends_on:
      - cadvisor
      - node-exporter
      - blackbox-exporter

# Root container
  nginx:
    image: nginx:alpine-slim
    container_name: nginx
    restart: always
    volumes:
      - "./dashboard:/usr/share/nginx/html"
    environment:
      VIRTUAL_HOST: ${ROOT_HOST},www.${ROOT_HOST}
      LETSENCRYPT_HOST: ${ROOT_HOST},www.${ROOT_HOST}
    depends_on:
      - acme-companion

  # Grafana container
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    restart: always
    volumes:
      - "${MONITORING_DATA_DIR}/grafana/storage:/var/lib/grafana"
      - "${MONITORING_DATA_DIR}/grafana/provisioning:/etc/grafana/provisioning"
    links:
      - prometheus:prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      VIRTUAL_HOST: grafana.${ROOT_HOST}
      LETSENCRYPT_HOST: grafana.${ROOT_HOST}
      VIRTUAL_PORT: 3000
    depends_on:
      - prometheus 
      - acme-companion

  # Transmission container
  transmission:
    image: linuxserver/transmission:4.0.6
    container_name: transmission
    restart: always
    hostname:
      transmission.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/transmission/data:/config"
      - "${PLEX_MEDIA_DIR}/downloads:/downloads"
      - "${PLEX_MEDIA_DIR}/watch:/watch"
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Sofia
      TRANSMISSION_WEB_HOME: /config/combustion-release/
      USER: ${TRANSMISSION_USER}
      PASS: ${TRANSMISSION_PASSWORD}
      VIRTUAL_HOST: transmission.${ROOT_HOST}
      LETSENCRYPT_HOST: transmission.${ROOT_HOST}
      VIRTUAL_PORT: 9091
    depends_on:
      - acme-companion

  # Files Browser container
  files:
    image: filebrowser/filebrowser:v2.31.1
    container_name: files
    restart: always
    hostname:
      files.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/filebrowser/data/filebrowser.db:/database/filebrowser.db"
      - "${PLEX_MEDIA_DIR}:/srv"
    command:
      - '--database'
      - '/database/filebrowser.db'
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Sofia
      VIRTUAL_HOST: files.${ROOT_HOST}
      LETSENCRYPT_HOST: files.${ROOT_HOST}
      VIRTUAL_PORT: 80
    depends_on:
      - acme-companion

  # Plex container
  plex:
    image: linuxserver/plex:1.41.0
    container_name: plex
    restart: always
    hostname:
      plex.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/plex:/config"
      - "${PLEX_MEDIA_DIR}:/media"
    ports:
      - 32400:32400
    environment:
      PUID: 1000
      PGID: 1000
      VERSION: docker
      PLEX_CLAIM: ${PLEX_CLAIM_TOKEN}
      VIRTUAL_HOST: plex.${ROOT_HOST}
      LETSENCRYPT_HOST: plex.${ROOT_HOST}
      VIRTUAL_PORT: 32400
    depends_on:
      - acme-companion

  # Calibre container
  calibre:
    image: linuxserver/calibre:7.18.0
    container_name: calibre
    restart: always
    hostname:
      calibre.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/calibre:/config"
    ports:
      - 8080:8080
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Sofia
      PASSWORD: ${CALIBRE_ADMIN_PWD}
      VIRTUAL_HOST: calibre.${ROOT_HOST}
      LETSENCRYPT_HOST: calibre.${ROOT_HOST}
      VIRTUAL_PORT: 8081
    depends_on:
      - acme-companion

  # FreshRSS container
  freshrss:
    image: linuxserver/freshrss:1.24.3
    container_name: freshrss
    restart: always
    hostname:
      freshrss.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/freshrss:/config"
    environment:
      UID: 1000
      GID: 1000
      TZ: Europe/Sofia
      VIRTUAL_HOST: freshrss.${ROOT_HOST}
      LETSENCRYPT_HOST: freshrss.${ROOT_HOST}
      VIRTUAL_PORT: 80
    depends_on:
      - acme-companion

  # PiHole container
  pihole:
    image: pihole/pihole:2024.07.0
    container_name: pihole
    restart: always
    hostname:
      pihole.${ROOT_HOST}
    volumes:
      - "${MONITORING_DATA_DIR}/pihole/etc_pihole:/etc/pihole"
      - "${MONITORING_DATA_DIR}/pihole/etc_dnsmasq.d:/etc/dnsmasq.d"
    ports:
      - "${ROOT_IP}:53:53/tcp"
      - "${ROOT_IP}:53:53/udp"
    environment:
      TZ: Europe/Sofia
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      VIRTUAL_HOST: pihole.${ROOT_HOST}
      LETSENCRYPT_HOST: pihole.${ROOT_HOST}
      VIRTUAL_PORT: 80
    depends_on:
      - acme-companion

  # VPN wireguard container
  wireguard:
    image: ghcr.io/wg-easy/wg-easy:14
    container_name: wireguard
    restart: always
    hostname:
      vpn.${ROOT_HOST}
    volumes:
      - "${DATA_DIR}/wireguard:/etc/wireguard"
    ports:
      - "51821:51821/tcp"
      - "51820:51820/udp"
    environment:
      LANG: en
      WG_HOST: vpn.${ROOT_HOST}
      PASSWORD_HASH: ${WIREGUARD_PASSWORD_HASH}
      PASSWORD: ${WIREGUARD_PASSWORD}
      UI_TRAFFIC_STATS: true
      UI_CHART_TYPE: 1 
      PORT: 51821
      VIRTUAL_HOST: vpn.${ROOT_HOST}
      LETSENCRYPT_HOST: vpn.${ROOT_HOST}
      VIRTUAL_PORT: 51821
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    depends_on:
      - acme-companion

  # Postgres DB container for Keycloak
  keycloakdb:
    image: postgres:15.8-alpine3.20
    container_name: keycloakdb
    restart: always
    expose:
      - "5432" 
    volumes:
      - "${DATA_DIR}/keycloakdb:/var/lib/postgresql/data"
    environment: 
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER}"]
      interval: 3s
      timeout: 1s
      retries: 10
    depends_on:
      - acme-companion

  # Keycloak container
  keycloak:
    image: keycloak/keycloak:25.0.5
    container_name: keycloak
    restart: always
    links:
      - keycloakdb:keycloakdb
    command:
      - 'start'
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb/${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_SCHEMA: public
      KC_HOSTNAME: auth.${ROOT_HOST}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      PROXY_ADDRESS_FORWARDING: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      LETSENCRYPT_HOST: auth.${ROOT_HOST}
      VIRTUAL_HOST: auth.${ROOT_HOST}
      VIRTUAL_PORT: 8080
    healthcheck:
      test: cat /proc/net/tcp6 | grep '00000000000000000000000000000000:1F90 00000000000000000000000000000000:0000' || exit 1
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 300s
    depends_on:
      keycloakdb:
          condition: service_healthy

  # InvVal container
  invval:
    image: dzahariev/invval:2.10
    container_name: invval
    restart: always
    hostname:
      invval.${ROOT_HOST}
    environment:
      PUID: 1000
      PGID: 1000
      KEYCLOAK_URL: https://auth.${ROOT_HOST} 
      REALM: ${INVVAL_REALM}
      CLIENT_ID: ${INVVAL_CLIENT_ID}
      CLIENT_SECRET: ${INVVAL_CLIENT_SECRET} 
      BASE_URL: https://invval.${ROOT_HOST}
      TZ: Europe/Sofia
      VIRTUAL_HOST: invval.${ROOT_HOST}
      LETSENCRYPT_HOST: invval.${ROOT_HOST}
      VIRTUAL_PORT: 8080
    depends_on:
      keycloak:
        condition: service_healthy

  # Postgres DB container for Domo
  domodb:
    image: postgres:15.8-alpine3.20
    container_name: domodb
    restart: always
    expose:
      - "${DOMO_DB_PORT}" 
    volumes:
      - "${DATA_DIR}/domodb:/var/lib/postgresql/data"
    environment: 
      POSTGRES_DB: ${DOMO_DB_NAME}
      POSTGRES_USER: ${DOMO_DB_USER}
      POSTGRES_PASSWORD: ${DOMO_DB_PASSWORD}
    command: ["-p", "${DOMO_DB_PORT}"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DOMO_DB_USER} -p ${DOMO_DB_PORT}"]
      interval: 3s
      timeout: 1s
      retries: 10
    depends_on:
      keycloak:
        condition: service_healthy

  # DB migrations for Domo
  domo-migrations:
    image: dzahariev/domo-migrations:1.6.3
    container_name: domo-migrations
    restart: on-failure
    environment:
      POSTGRES_HOST: domodb
      POSTGRES_PORT: ${DOMO_DB_PORT}
      POSTGRES_DB: ${DOMO_DB_NAME}
      POSTGRES_USER: ${DOMO_DB_USER}
      POSTGRES_PASSWORD: ${DOMO_DB_PASSWORD}
      POSTGRES_SSL: ${DOMO_DB_SSL}
    depends_on:
      domodb:
        condition: service_healthy
    command: ["-database", "postgres://${DOMO_DB_USER}:${DOMO_DB_PASSWORD}@domodb:${DOMO_DB_PORT}/${DOMO_DB_NAME}?sslmode=${DOMO_DB_SSL}", "-path", "/db/migrations", "up"]

  # Domo container
  domo:
    image: dzahariev/domo:1.6.3
    container_name: domo
    restart: always
    hostname:
      domo.${ROOT_HOST}
    volumes:
      - ./domo/keycloak/keycloak.json:/public/libs/keycloak-cfg/keycloak.json:ro
    environment:
      AUTH_URL: https://auth.${ROOT_HOST}
      AUTH_REALM: ${DOMO_REALM}
      AUTH_CLIENT_ID: ${DOMO_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${DOMO_CLIENT_SECRET}
      POSTGRES_HOST: domodb
      POSTGRES_PORT: ${DOMO_DB_PORT}
      POSTGRES_DB: ${DOMO_DB_NAME}
      POSTGRES_USER: ${DOMO_DB_USER}
      POSTGRES_PASSWORD: ${DOMO_DB_PASSWORD}
      POSTGRES_SSL: ${DOMO_DB_SSL}
      VIRTUAL_HOST: domo.${ROOT_HOST}
      LETSENCRYPT_HOST: domo.${ROOT_HOST}
      VIRTUAL_PORT: 8800
    depends_on:
      - domo-migrations

  # TaskBoard container
  taskboard:
    image: dzahariev/taskboard:1.12
    container_name: taskboard
    restart: always
    hostname:
      taskboard.${ROOT_HOST}
    volumes:
      - "${PLEX_MEDIA_DIR}/tasks:/tasks"
      - ./taskboard/keycloak/keycloak.json:/public/libs/keycloak-cfg/keycloak.json:ro
      - ./taskboard/configuration.json:/tasks/configuration.json:ro
    environment:
      AUTH_URL: https://auth.${ROOT_HOST}
      AUTH_REALM: ${TASKBOARD_REALM}
      AUTH_CLIENT_ID: ${TASKBOARD_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${TASKBOARD_CLIENT_SECRET}
      VIRTUAL_HOST: taskboard.${ROOT_HOST}
      LETSENCRYPT_HOST: taskboard.${ROOT_HOST}
      VIRTUAL_PORT: 8800
    depends_on:
      keycloak:
        condition: service_healthy

  # Handbrake worker container
  handbrake-worker:
    image: dzahariev/handbrake-worker:2.1
    container_name: handbrake-worker
    restart: always
    cpu_shares: 10
    volumes:
      - "${PLEX_MEDIA_DIR}/tasks:/tasks"
      - "${PLEX_MEDIA_DIR}/handbrake/input:/input"
      - "${PLEX_MEDIA_DIR}/handbrake/output:/output"

  # DLP worker container
  dlp-worker:
    image: dzahariev/dlp-worker:1.6
    container_name: dlp-worker
    restart: always
    cpu_shares: 10
    volumes:
      - "${PLEX_MEDIA_DIR}/tasks:/tasks"
      - "${PLEX_MEDIA_DIR}/downloads:/output"
